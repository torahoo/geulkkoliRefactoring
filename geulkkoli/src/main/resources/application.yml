spring:
  config:
    activate:
      on-profile: default

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB
      location:

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${spring.datasource.url}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
  # creat- drop -> update로 수정 (테이블이 없으면 생성하고 있으면 수정)
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 100
        jdbc:
          batch_size: 100

  messages:
    basename: errors

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${kakao.client-id}
            client-secret: ${kakao.client-secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            client-authentication-method: POST

          naver:
            client-id: ${naver.client-id}
            client-secret: ${naver.client-secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            client-authentication-method: POST

          google:
            client-id: ${google.client-id}
            client-secret: ${google.client-secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            scope: email, profile

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  h2:
    console:
      path: /h2-console
      enabled: true

  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true
  thymeleaf:
    cache: false

  #587 포트가 이메일 전송에 유용한 보안 포트입니다.
  #구글 계정으로 앱 서비스를 설정하여 전송할 수 있게 했습니다.
  #username은 우리가 이메일 전송 시 사용하는 계정입니다.
  #설정해 둔 계정으로 이메일을 전송하는데, JavaMailSender 클래스를 통해 작동합니다. (이메일 서비스에 불러와져 있는 그거)
  mail:
    host: smtp.gmail.com # 서버 호스트
    port: 587 # 서버 포트
    username: ${spring.mail.username} # 보내는 사람 이메일
    password: ${spring.mail.password}   # 실제 비밀번호가 아니라 앱 서비스용 비밀번호라 구글 로그인은 안 됨
    properties:
      mail:
        smtp:
          auth: true # 사용자 인증 시도 여부 (기본값 : false)
          timeout: 5000 # Socket Read Timeout 시간(ms) (기본값 : 무한대)
          starttls:
            enable: true # StartTLS 활성화 여부 (기본값 : false)


#JPA log
logging:
  level:
    org:
      hibernate:
        SQL: debug
        type:
          descriptor:
            sql:
              BasicBinder: trace
server:
  error:
    whitelabel:
      enabled: false
    path: /error
    include-exception: false
    include-message: never
comm:
  uploadPath: ${comm.uploadPath}